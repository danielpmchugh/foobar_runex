<?xml version="1.0" encoding="utf-8"?><DEFECTS><DEFECT><SFA><FILEPATH>c:\working\projectfoobar\pfc\</FILEPATH><FILENAME>primitives.h</FILENAME><LINE>274</LINE><COLUMN>30</COLUMN></SFA><DEFECTCODE>6326</DEFECTCODE><DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION><FUNCTION>pfc::__unsafe__swap_raw_t</FUNCTION><DECORATED>??$__unsafe__swap_raw_t@$00@pfc@@YAXPAX0@Z</DECORATED><FUNCLINE>273</FUNCLINE><PATH /></DEFECT><DEFECT><SFA><FILEPATH>c:\working\projectfoobar\pfc\</FILEPATH><FILENAME>primitives.h</FILENAME><LINE>263</LINE><COLUMN>2</COLUMN></SFA><DEFECTCODE>6294</DEFECTCODE><DESCRIPTION>Ill-defined for-loop:  initial condition does not satisfy test.  Loop body not executed.</DESCRIPTION><FUNCTION>pfc::swap_multi_t</FUNCTION><DECORATED>??$swap_multi_t@I$0A@@pfc@@YAXPAI0@Z</DECORATED><FUNCLINE>261</FUNCLINE><PATH /></DEFECT><DEFECT><SFA><FILEPATH>c:\working\projectfoobar\pfc\</FILEPATH><FILENAME>sort.cpp</FILENAME><LINE>142</LINE><COLUMN>55</COLUMN></SFA><DEFECTCODE>28159</DEFECTCODE><DESCRIPTION>Consider using 'GetTickCount64' instead of 'GetTickCount'. Reason: GetTickCount overflows roughly every 49 days.  Code that does not take that into account can loop indefinitely.  GetTickCount64 operates on 64 bit values and does not have that problem</DESCRIPTION><FUNCTION>pfc::uniqueVal</FUNCTION><DECORATED>?uniqueVal@pfc@@YA_KXZ</DECORATED><FUNCLINE>142</FUNCLINE><PATH /></DEFECT><DEFECT><SFA><FILEPATH>c:\working\projectfoobar\pfc\</FILEPATH><FILENAME>sort.cpp</FILENAME><LINE>153</LINE><COLUMN>56</COLUMN></SFA><DEFECTCODE>6297</DEFECTCODE><DESCRIPTION>Arithmetic overflow:  32-bit value is shifted, then cast to 64-bit value.  Results might not be an expected value.</DESCRIPTION><FUNCTION>pfc::myrand</FUNCTION><DECORATED>?myrand@pfc@@YAII@Z</DECORATED><FUNCLINE>149</FUNCLINE><PATH /></DEFECT><DEFECT><SFA><FILEPATH>c:\working\projectfoobar\pfc\</FILEPATH><FILENAME>profiler.h</FILENAME><LINE>22</LINE><COLUMN>22</COLUMN></SFA><DEFECTCODE>28159</DEFECTCODE><DESCRIPTION>Consider using 'GetTickCount64' instead of 'GetTickCount'. Reason: GetTickCount overflows roughly every 49 days.  Code that does not take that into account can loop indefinitely.  GetTickCount64 operates on 64 bit values and does not have that problem</DESCRIPTION><FUNCTION>pfc::profiler_local::{ctor}</FUNCTION><DECORATED>??0profiler_local@pfc@@QAE@PAVprofiler_static@1@@Z</DECORATED><FUNCLINE>20</FUNCLINE><PATH /></DEFECT><DEFECT><SFA><FILEPATH>c:\working\projectfoobar\pfc\</FILEPATH><FILENAME>profiler.h</FILENAME><LINE>25</LINE><COLUMN>28</COLUMN></SFA><DEFECTCODE>28159</DEFECTCODE><DESCRIPTION>Consider using 'GetTickCount64' instead of 'GetTickCount'. Reason: GetTickCount overflows roughly every 49 days.  Code that does not take that into account can loop indefinitely.  GetTickCount64 operates on 64 bit values and does not have that problem</DESCRIPTION><FUNCTION>pfc::profiler_local::{dtor}</FUNCTION><DECORATED>??1profiler_local@pfc@@QAE@XZ</DECORATED><FUNCLINE>24</FUNCLINE><PATH /></DEFECT><DEFECT><SFA><FILEPATH>c:\working\projectfoobar\pfc\</FILEPATH><FILENAME>profiler.h</FILENAME><LINE>72</LINE><COLUMN>21</COLUMN></SFA><DEFECTCODE>28159</DEFECTCODE><DESCRIPTION>Consider using 'GetTickCount64' instead of 'GetTickCount'. Reason: GetTickCount overflows roughly every 49 days.  Code that does not take that into account can loop indefinitely.  GetTickCount64 operates on 64 bit values and does not have that problem</DESCRIPTION><FUNCTION>pfc::lores_timer::start</FUNCTION><DECORATED>?start@lores_timer@pfc@@QAEXXZ</DECORATED><FUNCLINE>71</FUNCLINE><PATH /></DEFECT><DEFECT><SFA><FILEPATH>c:\working\projectfoobar\pfc\</FILEPATH><FILENAME>profiler.h</FILENAME><LINE>76</LINE><COLUMN>28</COLUMN></SFA><DEFECTCODE>28159</DEFECTCODE><DESCRIPTION>Consider using 'GetTickCount64' instead of 'GetTickCount'. Reason: GetTickCount overflows roughly every 49 days.  Code that does not take that into account can loop indefinitely.  GetTickCount64 operates on 64 bit values and does not have that problem</DESCRIPTION><FUNCTION>pfc::lores_timer::query</FUNCTION><DECORATED>?query@lores_timer@pfc@@QBENXZ</DECORATED><FUNCLINE>75</FUNCLINE><PATH /></DEFECT><DEFECT><SFA><FILEPATH>c:\working\projectfoobar\pfc\</FILEPATH><FILENAME>profiler.h</FILENAME><LINE>79</LINE><COLUMN>30</COLUMN></SFA><DEFECTCODE>28159</DEFECTCODE><DESCRIPTION>Consider using 'GetTickCount64' instead of 'GetTickCount'. Reason: GetTickCount overflows roughly every 49 days.  Code that does not take that into account can loop indefinitely.  GetTickCount64 operates on 64 bit values and does not have that problem</DESCRIPTION><FUNCTION>pfc::lores_timer::query_reset</FUNCTION><DECORATED>?query_reset@lores_timer@pfc@@QAENXZ</DECORATED><FUNCLINE>78</FUNCLINE><PATH /></DEFECT><DEFECT><SFA><FILEPATH>c:\working\projectfoobar\pfc\</FILEPATH><FILENAME>primitives.h</FILENAME><LINE>116</LINE><COLUMN>18</COLUMN></SFA><DEFECTCODE>28193</DEFECTCODE><DESCRIPTION>'ret' holds a value that must be examined.</DESCRIPTION><FUNCTION>pfc::__unsafe__in_place_constructor_t</FUNCTION><DECORATED>??$__unsafe__in_place_constructor_t@V?$string8_t@Valloc_standard@pfc@@@pfc@@@pfc@@YAXAAV?$string8_t@Valloc_standard@pfc@@@0@@Z</DECORATED><FUNCLINE>114</FUNCLINE><PATH><SFA><FILEPATH>c:\working\projectfoobar\pfc\</FILEPATH><FILENAME>primitives.h</FILENAME><LINE>115</LINE><COLUMN>0</COLUMN></SFA><SFA><FILEPATH>c:\working\projectfoobar\pfc\</FILEPATH><FILENAME>primitives.h</FILENAME><LINE>116</LINE><COLUMN>12</COLUMN></SFA><SFA><FILEPATH>c:\working\projectfoobar\pfc\</FILEPATH><FILENAME>primitives.h</FILENAME><LINE>119</LINE><COLUMN>1</COLUMN></SFA></PATH></DEFECT><DEFECT><SFA><FILEPATH>c:\working\projectfoobar\pfc\</FILEPATH><FILENAME>primitives.h</FILENAME><LINE>149</LINE><COLUMN>18</COLUMN></SFA><DEFECTCODE>28193</DEFECTCODE><DESCRIPTION>'ret' holds a value that must be examined.</DESCRIPTION><FUNCTION>pfc::__unsafe__in_place_constructor_copy_t</FUNCTION><DECORATED>??$__unsafe__in_place_constructor_copy_t@V?$string8_t@Valloc_standard@pfc@@@pfc@@V12@@pfc@@YAXAAV?$string8_t@Valloc_standard@pfc@@@0@ABV10@@Z</DECORATED><FUNCLINE>147</FUNCLINE><PATH><SFA><FILEPATH>c:\working\projectfoobar\pfc\</FILEPATH><FILENAME>primitives.h</FILENAME><LINE>148</LINE><COLUMN>0</COLUMN></SFA><SFA><FILEPATH>c:\working\projectfoobar\pfc\</FILEPATH><FILENAME>primitives.h</FILENAME><LINE>149</LINE><COLUMN>12</COLUMN></SFA><SFA><FILEPATH>c:\working\projectfoobar\pfc\</FILEPATH><FILENAME>primitives.h</FILENAME><LINE>154</LINE><COLUMN>1</COLUMN></SFA></PATH></DEFECT><DEFECT><SFA><FILEPATH>c:\working\projectfoobar\pfc\</FILEPATH><FILENAME>utf8.cpp</FILENAME><LINE>267</LINE><COLUMN>10</COLUMN></SFA><DEFECTCODE>6320</DEFECTCODE><DESCRIPTION>Exception-filter expression is the constant EXCEPTION_EXECUTE_HANDLER. This might mask exceptions that were not intended to be handled.</DESCRIPTION><FUNCTION>pfc::check_end_of_string</FUNCTION><DECORATED>?check_end_of_string@pfc@@YA_NPBD@Z</DECORATED><FUNCLINE>262</FUNCLINE><PATH /></DEFECT><DEFECT><SFA><FILEPATH>c:\working\projectfoobar\pfc\</FILEPATH><FILENAME>utf8.cpp</FILENAME><LINE>285</LINE><COLUMN>14</COLUMN></SFA><DEFECTCODE>6320</DEFECTCODE><DESCRIPTION>Exception-filter expression is the constant EXCEPTION_EXECUTE_HANDLER. This might mask exceptions that were not intended to be handled.</DESCRIPTION><FUNCTION>pfc::strcpy_utf8_truncate</FUNCTION><DECORATED>?strcpy_utf8_truncate@pfc@@YAIPBDPADI@Z</DECORATED><FUNCLINE>270</FUNCLINE><PATH /></DEFECT></DEFECTS>