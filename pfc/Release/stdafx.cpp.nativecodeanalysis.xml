<?xml version='1.0' encoding='UTF-8'?>
<DEFECTS><DEFECT><SFA><FILEPATH>c:\working\projectfoobar\pfc\</FILEPATH><FILENAME>profiler.h</FILENAME><LINE>22</LINE><COLUMN>22</COLUMN></SFA><DEFECTCODE>28159</DEFECTCODE><DESCRIPTION>Consider using 'GetTickCount64' instead of 'GetTickCount'. Reason: GetTickCount overflows roughly every 49 days.  Code that does not take that into account can loop indefinitely.  GetTickCount64 operates on 64 bit values and does not have that problem</DESCRIPTION><FUNCTION>pfc::profiler_local::{ctor}</FUNCTION><DECORATED>??0profiler_local@pfc@@QAE@PAVprofiler_static@1@@Z</DECORATED><FUNCLINE>20</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>c:\working\projectfoobar\pfc\</FILEPATH><FILENAME>profiler.h</FILENAME><LINE>25</LINE><COLUMN>28</COLUMN></SFA><DEFECTCODE>28159</DEFECTCODE><DESCRIPTION>Consider using 'GetTickCount64' instead of 'GetTickCount'. Reason: GetTickCount overflows roughly every 49 days.  Code that does not take that into account can loop indefinitely.  GetTickCount64 operates on 64 bit values and does not have that problem</DESCRIPTION><FUNCTION>pfc::profiler_local::{dtor}</FUNCTION><DECORATED>??1profiler_local@pfc@@QAE@XZ</DECORATED><FUNCLINE>24</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>c:\working\projectfoobar\pfc\</FILEPATH><FILENAME>profiler.h</FILENAME><LINE>72</LINE><COLUMN>21</COLUMN></SFA><DEFECTCODE>28159</DEFECTCODE><DESCRIPTION>Consider using 'GetTickCount64' instead of 'GetTickCount'. Reason: GetTickCount overflows roughly every 49 days.  Code that does not take that into account can loop indefinitely.  GetTickCount64 operates on 64 bit values and does not have that problem</DESCRIPTION><FUNCTION>pfc::lores_timer::start</FUNCTION><DECORATED>?start@lores_timer@pfc@@QAEXXZ</DECORATED><FUNCLINE>71</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>c:\working\projectfoobar\pfc\</FILEPATH><FILENAME>profiler.h</FILENAME><LINE>76</LINE><COLUMN>28</COLUMN></SFA><DEFECTCODE>28159</DEFECTCODE><DESCRIPTION>Consider using 'GetTickCount64' instead of 'GetTickCount'. Reason: GetTickCount overflows roughly every 49 days.  Code that does not take that into account can loop indefinitely.  GetTickCount64 operates on 64 bit values and does not have that problem</DESCRIPTION><FUNCTION>pfc::lores_timer::query</FUNCTION><DECORATED>?query@lores_timer@pfc@@QBENXZ</DECORATED><FUNCLINE>75</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>c:\working\projectfoobar\pfc\</FILEPATH><FILENAME>profiler.h</FILENAME><LINE>79</LINE><COLUMN>30</COLUMN></SFA><DEFECTCODE>28159</DEFECTCODE><DESCRIPTION>Consider using 'GetTickCount64' instead of 'GetTickCount'. Reason: GetTickCount overflows roughly every 49 days.  Code that does not take that into account can loop indefinitely.  GetTickCount64 operates on 64 bit values and does not have that problem</DESCRIPTION><FUNCTION>pfc::lores_timer::query_reset</FUNCTION><DECORATED>?query_reset@lores_timer@pfc@@QAENXZ</DECORATED><FUNCLINE>78</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>c:\working\projectfoobar\pfc\</FILEPATH><FILENAME>primitives.h</FILENAME><LINE>116</LINE><COLUMN>18</COLUMN></SFA><DEFECTCODE>28193</DEFECTCODE><DESCRIPTION>'ret' holds a value that must be examined.</DESCRIPTION><FUNCTION>pfc::__unsafe__in_place_constructor_t</FUNCTION><DECORATED>??$__unsafe__in_place_constructor_t@V?$string8_t@Valloc_standard@pfc@@@pfc@@@pfc@@YAXAAV?$string8_t@Valloc_standard@pfc@@@0@@Z</DECORATED><FUNCLINE>114</FUNCLINE><PATH><SFA><FILEPATH>c:\working\projectfoobar\pfc\</FILEPATH><FILENAME>primitives.h</FILENAME><LINE>115</LINE><COLUMN>0</COLUMN></SFA><SFA><FILEPATH>c:\working\projectfoobar\pfc\</FILEPATH><FILENAME>primitives.h</FILENAME><LINE>116</LINE><COLUMN>12</COLUMN></SFA><SFA><FILEPATH>c:\working\projectfoobar\pfc\</FILEPATH><FILENAME>primitives.h</FILENAME><LINE>119</LINE><COLUMN>1</COLUMN></SFA></PATH></DEFECT><DEFECT><SFA><FILEPATH>c:\working\projectfoobar\pfc\</FILEPATH><FILENAME>primitives.h</FILENAME><LINE>274</LINE><COLUMN>30</COLUMN></SFA><DEFECTCODE>6326</DEFECTCODE><DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION><FUNCTION>pfc::__unsafe__swap_raw_t</FUNCTION><DECORATED>??$__unsafe__swap_raw_t@$03@pfc@@YAXPAX0@Z</DECORATED><FUNCLINE>273</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>c:\working\projectfoobar\pfc\</FILEPATH><FILENAME>primitives.h</FILENAME><LINE>274</LINE><COLUMN>30</COLUMN></SFA><DEFECTCODE>6326</DEFECTCODE><DESCRIPTION>Potential comparison of a constant with another constant.</DESCRIPTION><FUNCTION>pfc::__unsafe__swap_raw_t</FUNCTION><DECORATED>??$__unsafe__swap_raw_t@$0M@@pfc@@YAXPAX0@Z</DECORATED><FUNCLINE>273</FUNCLINE><PATH/></DEFECT><DEFECT><SFA><FILEPATH>c:\working\projectfoobar\pfc\</FILEPATH><FILENAME>primitives.h</FILENAME><LINE>149</LINE><COLUMN>18</COLUMN></SFA><DEFECTCODE>28193</DEFECTCODE><DESCRIPTION>'ret' holds a value that must be examined.</DESCRIPTION><FUNCTION>pfc::__unsafe__in_place_constructor_copy_t</FUNCTION><DECORATED>??$__unsafe__in_place_constructor_copy_t@V?$string8_t@Valloc_standard@pfc@@@pfc@@V12@@pfc@@YAXAAV?$string8_t@Valloc_standard@pfc@@@0@ABV10@@Z</DECORATED><FUNCLINE>147</FUNCLINE><PATH><SFA><FILEPATH>c:\working\projectfoobar\pfc\</FILEPATH><FILENAME>primitives.h</FILENAME><LINE>148</LINE><COLUMN>0</COLUMN></SFA><SFA><FILEPATH>c:\working\projectfoobar\pfc\</FILEPATH><FILENAME>primitives.h</FILENAME><LINE>149</LINE><COLUMN>12</COLUMN></SFA><SFA><FILEPATH>c:\working\projectfoobar\pfc\</FILEPATH><FILENAME>primitives.h</FILENAME><LINE>154</LINE><COLUMN>1</COLUMN></SFA></PATH></DEFECT></DEFECTS>